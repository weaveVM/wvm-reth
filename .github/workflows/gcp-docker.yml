name: Build, Test, and Push Docker Image

on:
  push:
    branches:
      - main
      - dev
    tags:
      - '*'

jobs:
  build_test_push:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # 1. Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}
          token_format: access_token
          access_token_lifetime: 1800s

      # 3. Configure Docker to Use Google Artifact Registry
      - name: Configure Docker for Google Artifact Registry
        run: gcloud auth configure-docker us-east1-docker.pkg.dev

      # 4. Set Up Docker Buildx
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. Login to Google Artifact Registry
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      # 6. Determine Docker Tag Based on Git Reference
      - name: Determine Docker Tag
        id: docker_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            tag="latest"
          elif [[ "${GITHUB_REF}" == refs/heads/dev ]]; then
            tag="nightly"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            tag=${GITHUB_REF#refs/tags/}
          else
            tag=${GITHUB_REF#refs/heads/}
          fi
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "Determined Docker tag: ${tag}"

      # 7. Build the Docker Image
      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          push: false                 # Do not push yet
          load: true                  # Load the image into the Docker cache
          tags: |
            us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/wevm:${{ steps.docker_tag.outputs.tag }}
            wevm:local                # Local tag for testing
          cache-from: type=registry,ref=us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/wevm:${{ steps.docker_tag.outputs.tag }}
          cache-to: type=registry,ref=us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/wevm:${{ steps.docker_tag.outputs.tag }},mode=max

      # 8. Run Tests Against the Docker Image
      - name: Test Docker Image
        run: |
          # Example test: Check if the container starts successfully
          docker run --rm wevm:local /bin/sh -c "echo 'Running tests...'; exit 0"

          # Replace the above with your actual test commands, e.g.,
          # docker run --rm wevm:local your-test-command

      # 9. Push the Docker Image to Artifact Registry
      - name: Push Docker Image to Artifact Registry
        if: success()                  # Only run if previous steps succeeded
        uses: docker/build-push-action@v6
        with:
          push: true                    # Enable pushing
          tags: |
            us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/wevm:${{ steps.docker_tag.outputs.tag }}
          cache-from: type=registry,ref=us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/wevm:${{ steps.docker_tag.outputs.tag }}
          cache-to: type=registry,ref=us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO }}/wevm:${{ steps.docker_tag.outputs.tag }},mode=max

      # 10. Clean Up Local Docker Tags (Optional)
      - name: Remove Local Docker Tags
        if: always()                    # Run regardless of previous step outcomes
        run: |
          docker rmi wevm:local || true